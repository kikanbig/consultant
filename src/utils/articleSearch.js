const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–∏–≤–∞–Ω–∞—Ö
let divansData = null;

function loadDivansData() {
  if (!divansData) {
    try {
      const dataPath = path.join(__dirname, '..', 'data', 'divans.json');
      const rawData = fs.readFileSync(dataPath, 'utf8');
      divansData = JSON.parse(rawData);
      console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${divansData.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –¥–∏–≤–∞–Ω–∞—Ö:', error);
      divansData = [];
    }
  }
  return divansData;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∞—Ä—Ç–∏–∫—É–ª–∞ (—É–±–∏—Ä–∞–µ–º —Ç–æ—á–∫–∏)
function cleanArticle(article) {
  if (!article) return '';
  return String(article).replace(/[.\s-]/g, '').toLowerCase();
}

// –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
function findByArticle(searchArticle) {
  const data = loadDivansData();
  const cleanSearch = cleanArticle(searchArticle);
  
  // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  const product = data.find(item => {
    const cleanItemArticle = cleanArticle(item.article);
    return cleanItemArticle === cleanSearch;
  });
  
  return product || null;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
function formatProductProperties(product) {
  if (!product || !product.properties) {
    return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–≤–æ–π—Å—Ç–≤–∞—Ö —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.";
  }
  
  let response = `–¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º ${product.article}:\n\n`;
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
  const properties = product.properties;
  
  // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  if (properties['–ó–∞–≥–æ–ª–æ–≤–æ–∫']) {
    response += `üìã –ù–∞–∑–≤–∞–Ω–∏–µ: ${properties['–ó–∞–≥–æ–ª–æ–≤–æ–∫']}\n`;
  }
  
  if (properties['–¶–µ–Ω–∞']) {
    response += `üí∞ –¶–µ–Ω–∞: ${properties['–¶–µ–Ω–∞']} —Ä—É–±.\n`;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  Object.entries(properties).forEach(([key, value]) => {
    if (key !== '–ó–∞–≥–æ–ª–æ–≤–æ–∫' && key !== '–¶–µ–Ω–∞' && value) {
      // –°–æ–∫—Ä–∞—â–∞–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      let displayValue = String(value);
      if (displayValue.length > 100) {
        displayValue = displayValue.substring(0, 97) + '...';
      }
      response += `‚Ä¢ ${key}: ${displayValue}\n`;
    }
  });
  
  return response.trim();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
function generateArticleResponse(searchArticle) {
  const product = findByArticle(searchArticle);
  
  if (!product) {
    return {
      found: false,
      response: `–¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º ${searchArticle} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞—Ä—Ç–∏–∫—É–ª–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É –≤ —Ñ–∏—Ä–º–µ–Ω–Ω—ã—Ö —Ñ—É—Ç–±–æ–ª–∫–∞—Ö –¥–≤–∞–¥—Ü–∞—Ç—å –ø–µ—Ä–≤—ã–π –≤–µ–∫ –¥–æ–º.`
    };
  }
  
  const formattedInfo = formatProductProperties(product);
  
  return {
    found: true,
    product: product,
    response: formattedInfo
  };
}

module.exports = {
  findByArticle,
  generateArticleResponse,
  cleanArticle,
  formatProductProperties
};
